/*
 * Licensed to SK Telecom Co., LTD. (SK Telecom) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  SK Telecom licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoTest.proto

package io.druid.data.input;

import com.google.common.base.Supplier;
import com.google.common.base.Suppliers;
import com.google.common.collect.ImmutableMap;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.junit.Assert;
import org.junit.Test;

import java.io.IOException;
import java.io.InputStream;
import java.util.Map;

/**
 */
public class ExcelParserTest
{
  @Test
  public void test() throws IOException
  {
    InputStream input = Thread.currentThread().getContextClassLoader().getResourceAsStream("lineitem.xlsx");
    XSSFWorkbook workbook = new XSSFWorkbook(input);
    ExcelParser.ParsedIterator iterator = ExcelParser.parse(workbook, true, new int[]{0});
    int rowCount = 0;
    Map<String, Object> firstRow = null;
    while (iterator.hasNext()) {
      rowCount++;
      Supplier<String[]> namesSupplier = Suppliers.ofInstance(iterator.columnNames());
      Map<String, Object> row = ExcelParser.convert(iterator.next(), "sheetName", namesSupplier);
      if (firstRow == null) {
        firstRow = row;
      }
    }
    Assert.assertEquals(100, rowCount);
    Map<String, Object> expected =
        ImmutableMap.<String, Object>builder()
                    .put("sheetName", "Sheet0")
                    .put("L_ORDERKEY", "1054181")
                    .put("L_PARTKEY", "16217")
                    .put("L_SUPPKEY", "6218")
                    .put("L_LINENUMBER", "1")
                    .put("L_QUANTITY", "45")
                    .put("L_EXTENDEDPRICE", "50994.45")
                    .put("L_DISCOUNT", "0.03")
                    .put("L_TAX", "0.08")
                    .put("L_RETURNFLAG", "R")
                    .put("L_LINESTATUS", "F")
                    .put("L_SHIPDATE", "1992-01-02")
                    .put("L_COMMITDATE", "1992-02-05")
                    .put("L_RECEIPTDATE", "1992-01-15")
                    .put("L_SHIPINSTRUCT", "NONE")
                    .put("L_SHIPMODE", "MAIL")
                    .put("L_COMMENT", "y unusual instructions. furiously reg")
                    .build();
    Assert.assertEquals(expected, firstRow);
  }
}
